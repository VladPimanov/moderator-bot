import asyncio
import re
import logging
from datetime import datetime, timedelta
from telegram import Update, ChatPermissions
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from config import Config
from service_for_moderation import toxicity_classifier
from virustotal_scanner import vt_scanner

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
TOKEN = Config.TOKEN
BANNED_WORDS = Config.BANNED_WORDS
SPAM_LIMIT = Config.SPAM_LIMIT
DEFAULT_MUTE_DURATION = Config.MUTE_DURATION
TIME_UPDATE_COUNT_MESSAGES = Config.TIME_UPDATE_COUNT_MESSAGES
TOXICITY_THRESHOLD = Config.TOXICITY_THRESHOLD

DEFAULT_CHAT_SETTINGS = Config.DEFAULT_CHAT_SETTINGS

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
user_warnings = {}           # –ö–ª—é—á: (chat_id, user_id)
user_message_timestamps = {} # –ö–ª—é—á: (chat_id, user_id) -> [timestamp1, timestamp2, ...]
user_mute_status = {}        # –ö–ª—é—á: (chat_id, user_id)
chat_admins = {}             # {chat_id: [admin_id1, admin_id2]}
chat_settings = {}           # {chat_id: settings_dict}

async def get_chat_admins(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> list:
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞"""
    try:
        admins = await context.bot.get_chat_administrators(chat_id)
        return [admin.user.id for admin in admins]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞ {chat_id}: {str(e)}")
        return []

async def is_user_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if chat_id not in chat_admins:
        chat_admins[chat_id] = await get_chat_admins(chat_id, context)
    return user_id in chat_admins[chat_id]

async def get_chat_settings(chat_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ (—Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
    if chat_id not in chat_settings:
        chat_settings[chat_id] = DEFAULT_CHAT_SETTINGS.copy()
    return chat_settings[chat_id]

async def update_chat_setting(chat_id: int, setting: str, value) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–∞—Ç–∞"""
    settings = await get_chat_settings(chat_id)
    if setting in settings:
        settings[setting] = value
        return True
    return False

async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ reply –∫ —Å–æ–æ–±—â–µ–Ω–∏—é (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö —á–∞—Ç–æ–≤)"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not await is_user_admin(chat_id, user_id, context):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    try:
        target_id = update.message.reply_to_message.from_user.id
        username = update.message.reply_to_message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        await context.bot.ban_chat_member(chat_id=chat_id, user_id=target_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–∞–Ω–µ–Ω.")
    except Exception as e:
        logger.error(f"Ban error: {str(e)}")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def unmute_user(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –º—É—Ç–∞ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞"""
    settings = await get_chat_settings(chat_id)
    mute_duration = settings.get('mute_duration', DEFAULT_MUTE_DURATION)
    
    await asyncio.sleep(mute_duration)
    mute_key = (chat_id, user_id)
    try:
        if mute_key in user_mute_status and user_mute_status[mute_key]:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º—É—Ç–∞
            user_mute_status[mute_key] = False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                member = await context.bot.get_chat_member(chat_id, user_id)
                username = member.user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                await context.bot.send_message(chat_id, f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–º—É—á–µ–Ω.")
            except:
                logger.warning(f"Could not send unmute message for user {user_id}")
    except Exception as e:
        logger.error(f"Unmute error: {str(e)}")

async def mute_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú—å—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not await is_user_admin(chat_id, user_id, context):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    try:
        settings = await get_chat_settings(chat_id)
        mute_duration = settings.get('mute_duration', DEFAULT_MUTE_DURATION)
        
        target_id = update.message.reply_to_message.from_user.id
        username = update.message.reply_to_message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        chat_type = update.effective_chat.type
        mute_key = (chat_id, target_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–º—å—é—á–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if mute_key in user_mute_status and user_mute_status[mute_key]:
            await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ –∑–∞–º—å—é—á–µ–Ω.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ —á–∞—Ç–µ
        try:
            member = await context.bot.get_chat_member(chat_id, target_id)
            if member.status in ['left', 'kicked']:
                await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.")
                return
        except Exception as e:
            logger.warning(f"Failed to check user status: {str(e)}")
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
            
        # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
        if chat_type == "supergroup":
            try:
                permissions = ChatPermissions(can_send_messages=False)
                await context.bot.restrict_chat_member(chat_id, target_id, permissions)
            except Exception as e:
                logger.error(f"Restrict error in supergroup: {str(e)}")
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {str(e)}")
                return
        else:
            # –í –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º—É—Ç–∞
            pass
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º—É—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤
        user_mute_status[mute_key] = True
        await update.message.reply_text(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {mute_duration} —Å–µ–∫.")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–º—É—Ç–∞
        asyncio.create_task(unmute_user(chat_id, target_id, context))
        
    except Exception as e:
        if "User_not_participant" in str(e):
            await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.")
        else:
            logger.error(f"Mute error: {str(e)}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def warn_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–¥–∞—á–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö —á–∞—Ç–æ–≤)"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not await is_user_admin(chat_id, user_id, context):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    settings = await get_chat_settings(chat_id)
    if not settings['enable_warnings']:
        await update.message.reply_text("‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    
    try:
        target_id = update.message.reply_to_message.from_user.id
        username = update.message.reply_to_message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        warn_key = (chat_id, target_id)
        
        user_warnings[warn_key] = user_warnings.get(warn_key, 0) + 1
        warnings_count = user_warnings[warn_key]

        if warnings_count >= 3:
            # –ü—Ä–∏ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö - –±–∞–Ω
            await context.bot.ban_chat_member(chat_id, target_id)
            await update.message.reply_text(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ—Å–ª–µ –±–∞–Ω–∞
            user_warnings[warn_key] = 0
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warnings_count}/3 –¥–ª—è @{username}")
    except Exception as e:
        logger.error(f"Warn error: {str(e)}")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def check_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§–∏–ª—å—Ç—Ä —Å–ø–∞–º–∞, —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏, –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ –æ–ø–∞—Å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
    if not update.message or not update.message.text:
        return
    
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    username = update.effective_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_type = update.effective_chat.type
    mute_key = (chat_id, user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
    settings = await get_chat_settings(chat_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–º—å—é—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if mute_key in user_mute_status and user_mute_status[mute_key]:
        try:
            await context.bot.delete_message(chat_id, update.message.message_id)
            logger.info(f"Deleted message from muted user {user_id} in chat {chat_id}")
        except:
            pass
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        is_admin = await is_user_admin(chat_id, user_id, context)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–¥–ª—è –≤—Å–µ—Ö)
        if settings['enable_banned_words_filter']:
            text_lower = update.message.text.lower()
            if any(banned_word in text_lower for banned_word in BANNED_WORDS):
                await context.bot.delete_message(chat_id, update.message.message_id)
                await context.bot.send_message(
                    chat_id,
                    f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} —É–¥–∞–ª–µ–Ω–æ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª."
                )
                return

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        url_pattern = r'(?:https?://|www\.|\b)[a-zA-Z0-9-]+\.[a-zA-Z]{2,}(?:\.[a-zA-Z]{2,})*\S*'
        url_matches = re.findall(url_pattern, update.message.text)

        if url_matches and not is_admin:
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –æ–±—â–∏–π —Ñ–∏–ª—å—Ç—Ä —Å—Å—ã–ª–æ–∫
            if settings['enable_link_filter']:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª—é–±–æ–π —Å—Å—ã–ª–∫–æ–π
                await context.bot.delete_message(chat_id, update.message.message_id)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
                await context.bot.send_message(
                    chat_id,
                    f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} —É–¥–∞–ª–µ–Ω–æ: –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏."
                )
                return
            # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, –Ω–æ –≤–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            elif settings['enable_virustotal'] and vt_scanner:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –æ–ø–∞—Å–Ω—É—é
                for url in url_matches:
                    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL
                    normalized_url = url
                    if not url.startswith(('http://', 'https://')):
                        if url.startswith('www.'):
                            normalized_url = 'https://' + url
                        else:
                            normalized_url = 'https://' + url
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ VirusTotal
                    is_dangerous, detail = vt_scanner.get_url_reputation(normalized_url)
                    if is_dangerous:
                        # –ù–∞—à–ª–∏ –æ–ø–∞—Å–Ω—É—é —Å—Å—ã–ª–∫—É - —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await context.bot.delete_message(chat_id, update.message.message_id)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
                        await context.bot.send_message(
                            chat_id,
                            f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} —É–¥–∞–ª–µ–Ω–æ: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–ø–∞—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏."
                        )
                        return
                
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (–∏—Å–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        if settings['enable_spam_filter']:
            timestamp_key = (chat_id, user_id)
            current_time = datetime.now()
            
            if timestamp_key not in user_message_timestamps:
                user_message_timestamps[timestamp_key] = []
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_message_timestamps[timestamp_key] = [
                ts for ts in user_message_timestamps[timestamp_key] 
                if (current_time - ts).total_seconds() <= TIME_UPDATE_COUNT_MESSAGES
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_message_timestamps[timestamp_key].append(current_time)
            message_count = len(user_message_timestamps[timestamp_key])
            
            logger.debug(f"User @{username} message count: {message_count} (last {TIME_UPDATE_COUNT_MESSAGES} sec)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            if (message_count > SPAM_LIMIT 
                    and not (mute_key in user_mute_status and user_mute_status[mute_key])
                    and not is_admin):
                try:
                    # –£–¥–∞–ª—è–µ–º —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.delete_message(chat_id, update.message.message_id)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ —á–∞—Ç–µ
                    try:
                        member = await context.bot.get_chat_member(chat_id, user_id)
                        if member.status in ['left', 'kicked']:
                            logger.info(f"User @{username} has left the chat, skipping mute")
                            return
                    except Exception as e:
                        logger.warning(f"Failed to check user status: {str(e)}")
                        return

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º—É—Ç–∞
                    user_mute_status[mute_key] = True
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º—É—Ç–µ
                    settings = await get_chat_settings(chat_id)
                    mute_duration = settings.get('mute_duration', DEFAULT_MUTE_DURATION)
                    await context.bot.send_message(
                        chat_id,
                        f"üîá –§–ª—É–¥! @{username} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {mute_duration} —Å–µ–∫. ({message_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {TIME_UPDATE_COUNT_MESSAGES} —Å–µ–∫.)"
                    )
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–º—É—Ç–∞
                    asyncio.create_task(unmute_user(chat_id, user_id, context))
                    
                except Exception as e:
                    logger.error(f"Spam processing error: {str(e)}")
                return

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        if settings['enable_toxicity_filter']:
            try:
                if toxicity_classifier:
                    is_toxic, prob = toxicity_classifier.predict_toxicity(update.message.text)
                    if prob > TOXICITY_THRESHOLD:
                        await context.bot.delete_message(chat_id, update.message.message_id)
                        await context.bot.send_message(
                            chat_id,
                            f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} —É–¥–∞–ª–µ–Ω–æ –∑–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {prob:.2f})."
                        )
                        return
            except Exception as e:
                logger.error(f"Toxicity check error: {str(e)}")

    except Exception as e:
        logger.error(f"Message processing error: {str(e)}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫—Å–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–ø–∞–º–∞ –∏ —Ñ–ª—É–¥–∞\n"
        "- –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ —Å—Å—ã–ª–æ–∫\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:\n"
        "/ban - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
        f"/mute - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/warn - –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
        "/settings - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/enable <—Ñ–∏–ª—å—Ç—Ä> - –≤–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä\n"
        "/disable <—Ñ–∏–ª—å—Ç—Ä> - –≤—ã–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä\n"
        "/set_mute_duration <—Å–µ–∫—É–Ω–¥—ã> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞\n"
        "/set_links_policy <strict|safe|allow> - –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫\n"
        "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: toxicity, spam, links, virustotal, banned_words, warnings"
        "\n–ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Å—Å—ã–ª–æ–∫:"
        "\n- strict: –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã"
        "\n- safe: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏"
        "\n- allow: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤—Å–µ —Å—Å—ã–ª–∫–∏"
    )

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not await is_user_admin(chat_id, user_id, context):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    settings = await get_chat_settings(chat_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–∏—Ç–∏–∫—É —Å—Å—ã–ª–æ–∫
    if settings['enable_link_filter']:
        link_policy = "üîí –í—Å–µ —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã"
    elif settings['enable_virustotal']:
        link_policy = "üõ°Ô∏è –¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏"
    else:
        link_policy = "üîì –†–∞–∑—Ä–µ—à–µ–Ω—ã –≤—Å–µ —Å—Å—ã–ª–∫–∏"
    
    message = (
        "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: {'‚úÖ –≤–∫–ª—é—á–µ–Ω–∞' if settings['enable_toxicity_filter'] else '‚ùå –≤—ã–∫–ª—é—á–µ–Ω–∞'}\n"
        f"‚Ä¢ –ê–Ω—Ç–∏—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞: {'‚úÖ –≤–∫–ª—é—á–µ–Ω–∞' if settings['enable_spam_filter'] else '‚ùå –≤—ã–∫–ª—é—á–µ–Ω–∞'}\n"
        f"‚Ä¢ –§–∏–ª—å—Ç—Ä –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {'‚úÖ –≤–∫–ª—é—á–µ–Ω' if settings['enable_banned_words_filter'] else '‚ùå –≤—ã–∫–ª—é—á–µ–Ω'}\n"
        f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {'‚úÖ –≤–∫–ª—é—á–µ–Ω–∞' if settings['enable_warnings'] else '‚ùå –≤—ã–∫–ª—é—á–µ–Ω–∞'}\n"
        f"‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫: {link_policy}\n"
        f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞: {settings['mute_duration']} —Å–µ–∫"
    )
    
    await update.message.reply_text(message)

async def toggle_setting(update: Update, context: ContextTypes.DEFAULT_TYPE, enable: bool) -> None:
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not await is_user_admin(chat_id, user_id, context):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        action = "–≤–∫–ª—é—á–∏—Ç—å" if enable else "–≤—ã–∫–ª—é—á–∏—Ç—å"
        await update.message.reply_text(f"‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è {action}. –ù–∞–ø—Ä–∏–º–µ—Ä: /{'enable' if enable else 'disable'} spam")
        return
    
    setting_name = context.args[0].lower()
    setting_map = {
        'toxicity': 'enable_toxicity_filter',
        'spam': 'enable_spam_filter',
        'links': 'enable_link_filter',
        'virustotal': 'enable_virustotal',
        'banned_words': 'enable_banned_words_filter',
        'warnings': 'enable_warnings'
    }
    
    if setting_name not in setting_map:
        valid_settings = ", ".join(setting_map.keys())
        await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {valid_settings}")
        return
    
    setting_key = setting_map[setting_name]
    success = await update_chat_setting(chat_id, setting_key, enable)
    
    if success:
        action = "–≤–∫–ª—é—á–µ–Ω" if enable else "–≤—ã–∫–ª—é—á–µ–Ω"
        await update.message.reply_text(f"‚úÖ –§–∏–ª—å—Ç—Ä '{setting_name}' —É—Å–ø–µ—à–Ω–æ {action}.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

async def set_mute_duration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not await is_user_admin(chat_id, user_id, context):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: /set_mute_duration 60")
        return
    
    duration = int(context.args[0])
    if duration < 10 or duration > 86400:  # –û—Ç 10 —Å–µ–∫—É–Ω–¥ –¥–æ 1 –¥–Ω—è
        await update.message.reply_text("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 —Å–µ–∫—É–Ω–¥ –¥–æ 86400 —Å–µ–∫—É–Ω–¥ (1 –¥–µ–Ω—å).")
        return
    
    success = await update_chat_setting(chat_id, 'mute_duration', duration)
    
    if success:
        await update.message.reply_text(f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {duration} —Å–µ–∫.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

async def set_links_policy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è —Å—Å—ã–ª–æ–∫"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not await is_user_admin(chat_id, user_id, context):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è —Å—Å—ã–ª–æ–∫: strict, safe –∏–ª–∏ allow. –ù–∞–ø—Ä–∏–º–µ—Ä: /set_links_policy safe")
        return
    
    policy = context.args[0].lower()
    
    if policy == 'strict':
        await update_chat_setting(chat_id, 'enable_link_filter', True)
        await update_chat_setting(chat_id, 'enable_virustotal', False)
        await update.message.reply_text("‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫: üîí –í—Å–µ —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    elif policy == 'safe':
        await update_chat_setting(chat_id, 'enable_link_filter', False)
        await update_chat_setting(chat_id, 'enable_virustotal', True)
        await update.message.reply_text("‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫: üõ°Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ VirusTotal).")
    elif policy == 'allow':
        await update_chat_setting(chat_id, 'enable_link_filter', False)
        await update_chat_setting(chat_id, 'enable_virustotal', False)
        await update.message.reply_text("‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫: üîì –†–∞–∑—Ä–µ—à–µ–Ω—ã –≤—Å–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: strict, safe, allow")

async def enable_setting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    await toggle_setting(update, context, True)

async def disable_setting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    await toggle_setting(update, context, False)

async def cleanup_old_messages(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    current_time = datetime.now()
    keys_to_delete = []
    
    for key, timestamps in user_message_timestamps.items():
        updated_timestamps = [
            ts for ts in timestamps 
            if (current_time - ts).total_seconds() <= TIME_UPDATE_COUNT_MESSAGES
        ]
        
        if updated_timestamps:
            user_message_timestamps[key] = updated_timestamps
        else:
            keys_to_delete.append(key)
    
    for key in keys_to_delete:
        del user_message_timestamps[key]
    
    logger.info(f"–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: —É–¥–∞–ª–µ–Ω–æ {len(keys_to_delete)} –∑–∞–ø–∏—Å–µ–π")

async def refresh_admins(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    for chat_id in list(chat_admins.keys()):
        try:
            chat_admins[chat_id] = await get_chat_admins(chat_id, context.bot)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞ {chat_id}: {str(e)}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        app = Application.builder().token(TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("ban", ban_user))
        app.add_handler(CommandHandler("mute", mute_user))
        app.add_handler(CommandHandler("warn", warn_user))
        app.add_handler(CommandHandler("settings", show_settings))
        app.add_handler(CommandHandler("enable", enable_setting))
        app.add_handler(CommandHandler("disable", disable_setting))
        app.add_handler(CommandHandler("set_mute_duration", set_mute_duration))
        app.add_handler(CommandHandler("set_links_policy", set_links_policy))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_message))
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        job_queue = app.job_queue
        if job_queue:
            job_queue.run_repeating(
                cleanup_old_messages,
                interval=60,
                first=0
            )
            job_queue.run_repeating(
                refresh_admins,
                interval=600,
                first=0
            )

        logger.info("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        app.run_polling()
    except Exception as e:
        logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")

if __name__ == "__main__":
    main()